import * as Sentry from '@sentry/nextjs'

export function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    Sentry.init({
      dsn: process.env.SENTRY_DSN,
      tracesSampleRate: 1.0,
      debug: false,
      environment: process.env.NODE_ENV,
      beforeSend(event) {
        // Filter out unwanted events
        if (event.exception) {
          const error = event.exception.values?.[0]
          if (error?.value?.includes('ResizeObserver loop limit exceeded')) {
            return null
          }
        }
        return event
      }
    })
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    Sentry.init({
      dsn: process.env.SENTRY_DSN,
      tracesSampleRate: 1.0,
      debug: false,
      environment: process.env.NODE_ENV
    })
  }
}

export async function onRequestError(request: Request, error: Error) {
  // This function is called when an error occurs in a request
  Sentry.captureRequestError(error, request)
}