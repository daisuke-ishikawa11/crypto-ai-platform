import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getUserFromRequest, shouldRedirect, logAuthEvent } from '@/lib/auth/middleware-helpers';
import { apiLogger } from '@/lib/monitoring/logger';
import { checkRateLimit, detectSuspiciousActivity } from '@/lib/security/rate-limiter';

export async function middleware(request: NextRequest) {
  const requestId = crypto.randomUUID();
  
  // Add request ID to headers for tracing
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-request-id', requestId);

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });

  // Basic Security Headers only
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  
  // Temporarily disable all authentication checks for deployment testing
  // TODO: Re-enable authentication after fixing deployment issues
  
  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}; 