import type { Lesson } from '../../../lib/types/learning';

export const lesson2: Lesson = {
  id: 'blockchain-2',
  categoryId: '8',
  title: '暗号学の基礎：ハッシュ関数とデジタル署名',
  slug: 'cryptography-fundamentals',
  description: 'ブロックチェーンの根幹を支える暗号学技術、ハッシュ関数の仕組み、デジタル署名による認証メカニズムを詳しく学習します',
  difficultyLevel: 'intermediate',
  estimatedMinutes: 35,
  orderIndex: 2,
  content: {
    sections: [
      {
        type: 'text',
        title: '暗号学の歴史と発展',
        content: `
暗号学は古代から情報の秘匿に使われてきましたが、コンピューターの発達により数学的な厳密さを持つ現代暗号学へと進化しました。

**暗号学の発展段階：**
1. **古典暗号（紀元前～1970年代）**
   - シーザー暗号、換字暗号
   - エニグマ機械
   - 秘匿性に依存

2. **現代暗号（1970年代～）**
   - 数学的な安全性証明
   - 公開鍵暗号の発明
   - 計算量理論に基づく設計

**ブロックチェーンで使用される暗号技術：**
- **ハッシュ関数**: データ整合性の保証
- **デジタル署名**: 認証と否認防止
- **マークルツリー**: 効率的な検証構造
- **楕円曲線暗号**: 効率的な公開鍵暗号
- **コミット・リビール**: プライバシー保護

**セキュリティの基本原則：**
1. **機密性（Confidentiality）**: 情報の秘匿
2. **完全性（Integrity）**: データの改ざん検出
3. **可用性（Availability）**: システムの稼働継続
4. **真正性（Authenticity）**: 送信者の身元確認
5. **否認防止（Non-repudiation）**: 行為の否定防止
        `
      },
      {
        type: 'text',
        title: 'ハッシュ関数の詳細メカニズム',
        content: `
ハッシュ関数は任意長のデータを固定長の値に変換する一方向関数です。

**ハッシュ関数の数学的性質：**
1. **効率性**: 高速な計算が可能
2. **決定性**: 同じ入力から必ず同じ出力
3. **一方向性**: 逆算が計算論的に困難
4. **雪崩効果**: 入力の微小変化で出力が大きく変化
5. **衝突耐性**: 異なる入力から同じ出力を得ることが困難

**主要なハッシュ関数：**

**SHA-256（Bitcoin等で使用）：**
\`\`\`
メッセージブロック: 512ビット単位で処理
出力: 256ビット（64桁の16進数）
安全性レベル: 128ビット（2^128回の計算が必要）
\`\`\`

**Keccak-256（Ethereum等で使用）：**
\`\`\`
可変長入力対応
スポンジ構造による柔軟性
SHA-3として標準化
\`\`\`

**実際のハッシュ計算例：**
\`\`\`
入力: "blockchain"
SHA-256: 239900a65b8e8c0b5d0c0b6e1de6c6a6d9f9e1c8b5a2c9d8f6e4c3a2b1c0d9e8
Keccak-256: 0x8d5a8c5e9b4e8c3d2a1f9e6d8c5b4a3e2d1c0f9e8d7c6b5a4938271605849373

入力: "Blockchain"（最初を大文字）
SHA-256: d23d7d5e9c7b6a4e8d5c3b2a1f0e9d8c7b6a5948372615092481635084927364
\`\`\`
        `
      },
      {
        type: 'text',
        title: 'デジタル署名の仕組みと実装',
        content: `
デジタル署名は公開鍵暗号を用いた認証技術で、メッセージの真正性と完全性を保証します。

**公開鍵暗号の基本概念：**
- **鍵ペア**: 数学的に関連する公開鍵と秘密鍵
- **一方向性**: 公開鍵から秘密鍵の推測は困難
- **相互変換**: 一方で暗号化したものは他方で復号化

**デジタル署名の手順：**

**1. 署名生成（送信者）:**
\`\`\`
1. メッセージのハッシュ値を計算
2. 秘密鍵でハッシュ値を暗号化（署名）
3. メッセージと署名を一緒に送信
\`\`\`

**2. 署名検証（受信者）:**
\`\`\`
1. 送信者の公開鍵を入手
2. 署名を公開鍵で復号化
3. メッセージのハッシュ値を独自計算
4. 両方のハッシュ値が一致すれば署名有効
\`\`\`

**楕円曲線デジタル署名アルゴリズム（ECDSA）:**
Bitcoinで使用される主要な署名方式
- secp256k1曲線を使用
- 256ビットの秘密鍵から公開鍵を生成
- 署名は(r, s)の組で表現

**実装例（概念的）:**
\`\`\`python
# 秘密鍵（ランダムな256ビット数）
private_key = 0x1234567890abcdef...

# 公開鍵生成（楕円曲線上の点）
public_key = private_key * G  # Gは基点

# 署名生成
message_hash = SHA256(message)
signature = sign(message_hash, private_key)

# 署名検証
is_valid = verify(signature, message_hash, public_key)
\`\`\`
        `
      },
      {
        type: 'text',
        title: 'マークルツリーと効率的検証',
        content: `
マークルツリーは多数のデータを効率的に検証するための二分木構造です。

**マークルツリーの構造：**
- **リーフノード**: 個別のデータのハッシュ値
- **内部ノード**: 子ノード2つのハッシュ値を結合したハッシュ
- **ルートハッシュ**: ツリー全体を代表する単一のハッシュ値

**構築手順：**
\`\`\`
1. 各トランザクションのハッシュ値を計算（リーフ）
2. 隣接する2つのハッシュを結合してハッシュ化
3. ルートが1つになるまで繰り返し
4. データ数が奇数の場合は最後の値を複製
\`\`\`

**検証の効率性：**
- **完全検証**: すべてのデータをダウンロード・検証
- **マークル証明**: O(log n)の少数のハッシュで検証可能
- **SPV（Simplified Payment Verification）**: ライトクライアントでの検証

**具体例（4つのトランザクション）:**
\`\`\`
          Root Hash
         /          \\
    Hash(A,B)    Hash(C,D)
    /      \\      /      \\
Hash(A) Hash(B) Hash(C) Hash(D)
   |       |       |       |
  Tx A    Tx B    Tx C    Tx D
\`\`\`

**マークル証明の実例：**
Tx Bの存在を証明するために必要なもの：
- Hash(A): Tx Bの兄弟ノード
- Hash(C,D): 上位レベルでの兄弟ノード
- Root Hash: 最終的な比較対象

これにより、4つのトランザクション全体をダウンロードせずにTx Bの存在を証明可能。
        `
      }
    ],
    keyPoints: [
      'ハッシュ関数は一方向性と衝突耐性により改ざん検出を実現',
      'デジタル署名は公開鍵暗号により認証と否認防止を提供',
      'SHA-256とECDSAがBitcoinの中核的暗号技術',
      'マークルツリーにより効率的なデータ検証が可能',
      '暗号学的安全性は計算量理論に基づく数学的根拠がある'
    ],
    summary: 'ブロックチェーンのセキュリティは、ハッシュ関数による完全性保証、デジタル署名による認証、マークルツリーによる効率的検証の組み合わせで実現されています。',
    practicalExamples: [
      'Bitcoin: SHA-256ダブルハッシュとECDSA署名による堅牢なセキュリティ',
      'Ethereum: Keccak-256ハッシュと改良されたデジタル署名',
      'マークルツリー: SPVウォレットでの軽量検証実現',
      'ハッシュポインター: Git版本管理システムでの同様原理活用'
    ],
    warningNotes: [
      '量子コンピューターの実用化により現在の暗号技術が脅威にさらされる可能性があります',
      'ハッシュ衝突攻撃や秘密鍵の漏洩は深刻なセキュリティリスクです',
      '暗号学的乱数の品質は秘密鍵の安全性に直結します',
      '実装上の欠陥（サイドチャネル攻撃等）にも注意が必要です'
    ]
  },
  quiz: [
    {
      id: 'blockchain-2-q1',
      question: 'ハッシュ関数の重要な性質として含まれないものはどれですか？',
      options: [
        '一方向性',
        '可逆性',
        '雪崩効果',
        '衝突耐性'
      ],
      correctAnswer: 1,
      explanation: 'ハッシュ関数は一方向関数であり、可逆性（逆算可能性）を持ちません。これがセキュリティの基盤となっています。'
    },
    {
      id: 'blockchain-2-q2',
      question: 'デジタル署名の検証プロセスで使用するのはどれですか？',
      options: [
        '送信者の秘密鍵',
        '送信者の公開鍵',
        '受信者の秘密鍵',
        '受信者の公開鍵'
      ],
      correctAnswer: 1,
      explanation: 'デジタル署名の検証には送信者の公開鍵を使用します。署名は送信者の秘密鍵で生成され、対応する公開鍵で検証されます。'
    },
    {
      id: 'blockchain-2-q3',
      question: 'マークルツリーの主要な利点はどれですか？',
      options: [
        'データの暗号化',
        'ネットワーク速度の向上',
        '効率的なデータ検証',
        'ストレージ容量の削減'
      ],
      correctAnswer: 2,
      explanation: 'マークルツリーの主要な利点は、全データをダウンロードせずにO(log n)の複雑度で特定データの存在を証明できる効率的検証です。'
    }
  ],
  lastUpdated: '2024-12-10',
  factChecked: true
};