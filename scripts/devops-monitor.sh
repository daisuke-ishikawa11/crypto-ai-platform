#!/bin/bash

# üöÄ DevOpsÁõ£Ë¶ñ„Ç®„Éº„Ç∏„Çß„É≥„Éà - Claude CodeÁµ±ÂêàÁâà
# Imrat„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíCrypto AI Platform„Å´ÊúÄÈÅ©Âåñ

set -euo pipefail

# Ë®≠ÂÆö
CLAUDE_SESSION="crypto-devops"
CHECK_INTERVAL=${CHECK_INTERVAL:-300}  # 5ÂàÜÈñìÈöî
LOG_FILES=(
    "/var/log/nginx/access.log"
    "/var/log/nginx/error.log"
    "logs/application.log"
    "logs/api.log"
    "logs/error.log"
)

# „Ç´„É©„ÉºË®≠ÂÆö
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# „É≠„Ç∞Èñ¢Êï∞
log_info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARN: $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"
}

log_success() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] SUCCESS: $1${NC}"
}

# tmux„Çª„ÉÉ„Ç∑„Éß„É≥Á¢∫Ë™ç
check_tmux_session() {
    if ! tmux has-session -t "$CLAUDE_SESSION" 2>/dev/null; then
        log_error "Claude Code tmux„Çª„ÉÉ„Ç∑„Éß„É≥ '$CLAUDE_SESSION' „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_info "„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ: tmux new-session -d -s $CLAUDE_SESSION claude"
        exit 1
    fi
    log_info "tmux„Çª„ÉÉ„Ç∑„Éß„É≥ '$CLAUDE_SESSION' „ÇíÁ¢∫Ë™ç"
}

# „É≠„Ç∞Áõ£Ë¶ñÁî®„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Éó„É≠„Çª„ÇπÈñãÂßã
start_log_monitoring() {
    log_info "„É≠„Ç∞Áõ£Ë¶ñ„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Éó„É≠„Çª„Çπ„ÇíÈñãÂßã‰∏≠..."
    
    # Imrat„ÅÆÊâãÊ≥ï: ÂàÜÂâ≤„Ç≥„Éû„É≥„ÉâÂÆüË°å
    tmux send-keys -t "$CLAUDE_SESSION" "# DevOpsÁõ£Ë¶ñ„Ç®„Éº„Ç∏„Çß„É≥„ÉàÈñãÂßã"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    
    # „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Åß„É≠„Ç∞Ë¶ÅÁ¥Ñ„Éó„É≠„Çª„ÇπÈñãÂßã
    tmux send-keys -t "$CLAUDE_SESSION" "echo 'Starting log monitoring for Crypto AI Platform...'"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    
    log_success "„É≠„Ç∞Áõ£Ë¶ñ„Éó„É≠„Çª„ÇπÈñãÂßãÂÆå‰∫Ü"
}

# ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
send_check_command() {
    log_info "„É≠„Ç∞„ÉÅ„Çß„ÉÉ„ÇØ„Ç≥„Éû„É≥„Éâ„ÇíÈÄÅ‰ø°‰∏≠..."
    
    # Imrat„ÅÆËß£Ê±∫Ê≥ï: tmux „Ç≥„Éû„É≥„Éâ„ÇíÂàÜÂâ≤
    tmux send-keys -t "$CLAUDE_SESSION" "check crypto platform logs"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    
    log_success "„ÉÅ„Çß„ÉÉ„ÇØ„Ç≥„Éû„É≥„ÉâÈÄÅ‰ø°ÂÆå‰∫Ü"
}

# È´òÂ∫¶„Å™„É≠„Ç∞Ëß£Êûê„Ç≥„Éû„É≥„ÉâÈÄÅ‰ø°
send_advanced_analysis() {
    local analysis_type="$1"
    
    case "$analysis_type" in
        "performance")
            tmux send-keys -t "$CLAUDE_SESSION" "analyze api response times and identify bottlenecks"
            ;;
        "errors")
            tmux send-keys -t "$CLAUDE_SESSION" "summarize errors from last 15 minutes, ignore bot scanning"
            ;;
        "webhooks")
            tmux send-keys -t "$CLAUDE_SESSION" "report processed webhooks and any failures"
            ;;
        "security")
            tmux send-keys -t "$CLAUDE_SESSION" "check for suspicious authentication attempts"
            ;;
        *)
            tmux send-keys -t "$CLAUDE_SESSION" "general system health check"
            ;;
    esac
    
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    log_info "È´òÂ∫¶„Å™Ëß£Êûê„Ç≥„Éû„É≥„ÉâÈÄÅ‰ø°: $analysis_type"
}

# „Ç∑„Çπ„ÉÜ„É†„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜ
collect_system_metrics() {
    local metrics_file="/tmp/crypto-platform-metrics.json"
    
    cat > "$metrics_file" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "system": {
        "cpu_usage": "$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 || echo "N/A")",
        "memory_usage": "$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}' || echo "N/A")",
        "disk_usage": "$(df -h / | tail -1 | awk '{print $5}' | cut -d'%' -f1 || echo "N/A")",
        "load_average": "$(uptime | awk -F'load average:' '{print $2}' || echo "N/A")"
    },
    "application": {
        "node_processes": $(pgrep -f node | wc -l),
        "active_connections": $(netstat -an | grep :3000 | grep ESTABLISHED | wc -l || echo "0"),
        "log_errors_last_5min": $(find logs/ -name "*.log" -mmin -5 -exec grep -i error {} + | wc -l 2>/dev/null || echo "0")
    },
    "services": {
        "nginx_status": "$(systemctl is-active nginx 2>/dev/null || echo "unknown")",
        "docker_containers": $(docker ps --format "table" 2>/dev/null | wc -l || echo "0")
    }
}
EOF
    
    # „É°„Éà„É™„ÇØ„Çπ„ÇíClaude„Å´ÈÄÅ‰ø°
    tmux send-keys -t "$CLAUDE_SESSION" "System metrics collected: $(cat $metrics_file)"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    
    log_info "„Ç∑„Çπ„ÉÜ„É†„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜÂÆå‰∫Ü"
}

# „Ç¢„É©„Éº„ÉàÂá¶ÁêÜ
handle_alert() {
    local alert_type="$1"
    local message="$2"
    
    log_warn "„Ç¢„É©„Éº„ÉàÊ§úÂá∫: $alert_type - $message"
    
    # Á∑äÊÄ•Â∫¶„Å´Âøú„Åò„ÅüÂá¶ÁêÜ
    case "$alert_type" in
        "critical")
            tmux send-keys -t "$CLAUDE_SESSION" "CRITICAL ALERT: $message - immediate action required"
            tmux send-keys -t "$CLAUDE_SESSION" C-m
            # ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†„Å®ÈÄ£Êê∫
            echo "$(date): CRITICAL - $message" >> alerts.log
            ;;
        "warning")
            tmux send-keys -t "$CLAUDE_SESSION" "WARNING: $message - monitoring required"
            tmux send-keys -t "$CLAUDE_SESSION" C-m
            ;;
    esac
}

# Ëá™Âãï„É≠„Ç∞„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥
rotate_logs() {
    log_info "„É≠„Ç∞„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å‰∏≠..."
    
    for log_file in "${LOG_FILES[@]}"; do
        if [[ -f "$log_file" ]] && [[ $(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null || echo "0") -gt 104857600 ]]; then # 100MB
            mv "$log_file" "${log_file}.$(date +%Y%m%d_%H%M%S)"
            touch "$log_file"
            log_info "„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü: $log_file"
        fi
    done
}

# „É°„Ç§„É≥Áõ£Ë¶ñ„É´„Éº„Éó
main_monitoring_loop() {
    log_info "DevOpsÁõ£Ë¶ñ„É´„Éº„Éó„ÇíÈñãÂßã„Åó„Åæ„Åô (ÈñìÈöî: ${CHECK_INTERVAL}Áßí)"
    
    local iteration=0
    
    while true; do
        iteration=$((iteration + 1))
        log_info "Áõ£Ë¶ñ„Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥ #$iteration ÈñãÂßã"
        
        # Âü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
        send_check_command
        
        # „Ç∑„Çπ„ÉÜ„É†„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜÔºà5Âõû„Å´1ÂõûÔºâ
        if (( iteration % 5 == 0 )); then
            collect_system_metrics
        fi
        
        # „É≠„Ç∞„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥Ôºà12Âõû„Å´1Âõû = 1ÊôÇÈñì„Å´1ÂõûÔºâ
        if (( iteration % 12 == 0 )); then
            rotate_logs
        fi
        
        # È´òÂ∫¶„Å™Ëß£ÊûêÔºà10Âõû„Å´1ÂõûÔºâ
        if (( iteration % 10 == 0 )); then
            case $((iteration % 40)) in
                10) send_advanced_analysis "performance" ;;
                20) send_advanced_analysis "errors" ;;
                30) send_advanced_analysis "webhooks" ;;
                0)  send_advanced_analysis "security" ;;
            esac
        fi
        
        log_info "„Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥ #$iteration ÂÆå‰∫Ü - ${CHECK_INTERVAL}ÁßíÂæÖÊ©ü"
        sleep "$CHECK_INTERVAL"
    done
}

# „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„Çµ„Éù„Éº„ÉàÈñ¢Êï∞
setup_claude_commands() {
    log_info "Claude CodeÁî®„ÅÆ„Ç´„Çπ„Çø„É†„Ç≥„Éû„É≥„Éâ„ÇíË®≠ÂÆö‰∏≠..."
    
    # „É°„É¢„É™„Å´‰øùÂ≠ò„Åô„Çã„É´„Éº„É´
    tmux send-keys -t "$CLAUDE_SESSION" "Remember these monitoring rules for Crypto AI Platform:"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    tmux send-keys -t "$CLAUDE_SESSION" "1. Ignore bot scanning attempts (user-agents: bot, spider, crawler)"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    tmux send-keys -t "$CLAUDE_SESSION" "2. Focus on API endpoints: /api/ai/, /api/learning/, /api/market/"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    tmux send-keys -t "$CLAUDE_SESSION" "3. Alert on response times > 5 seconds"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    tmux send-keys -t "$CLAUDE_SESSION" "4. Track Supabase connection errors"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    tmux send-keys -t "$CLAUDE_SESSION" "5. Monitor OpenAI/Anthropic API rate limits"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
}

# „Ç∑„Ç∞„Éä„É´„Éè„É≥„Éâ„É™„É≥„Ç∞
cleanup() {
    log_info "Áõ£Ë¶ñ„Éó„É≠„Çª„Çπ„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó‰∏≠..."
    tmux send-keys -t "$CLAUDE_SESSION" "DevOps monitoring stopped"
    tmux send-keys -t "$CLAUDE_SESSION" C-m
    exit 0
}

trap cleanup SIGINT SIGTERM

# ‰ΩøÁî®ÊñπÊ≥ïË°®Á§∫
usage() {
    cat << EOF
üöÄ Crypto AI Platform - DevOpsÁõ£Ë¶ñ„Ç®„Éº„Ç∏„Çß„É≥„Éà

‰ΩøÁî®ÊñπÊ≥ï:
    $0 [„Ç™„Éó„Ç∑„Éß„É≥]

„Ç™„Éó„Ç∑„Éß„É≥:
    -i, --interval SECONDS  „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöîÔºà„Éá„Éï„Ç©„É´„Éà: 300ÁßíÔºâ
    -s, --session NAME      tmux„Çª„ÉÉ„Ç∑„Éß„É≥ÂêçÔºà„Éá„Éï„Ç©„É´„Éà: crypto-devopsÔºâ
    -h, --help              „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫

‰æã:
    $0                      # „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅßÈñãÂßã
    $0 -i 60               # 1ÂàÜÈñìÈöî„Åß„ÉÅ„Çß„ÉÉ„ÇØ
    $0 -s my-session       # „Ç´„Çπ„Çø„É†„Çª„ÉÉ„Ç∑„Éß„É≥Âêç„Çí‰ΩøÁî®

„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó:
    1. tmux new-session -d -s crypto-devops claude
    2. $0

Ê©üËÉΩ:
    ‚úì „É™„Ç¢„É´„Çø„Ç§„É†„É≠„Ç∞Áõ£Ë¶ñ
    ‚úì „Ç∑„Çπ„ÉÜ„É†„É°„Éà„É™„ÇØ„ÇπÂèéÈõÜ
    ‚úì Ëá™Âãï„Ç¢„É©„Éº„Éà
    ‚úì ImratÂºètmux„Ç≥„Éû„É≥„ÉâÂàÜÂâ≤
    ‚úì Claude CodeÁµ±Âêà
EOF
}

# „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞Âá¶ÁêÜ
while [[ $# -gt 0 ]]; do
    case $1 in
        -i|--interval)
            CHECK_INTERVAL="$2"
            shift 2
            ;;
        -s|--session)
            CLAUDE_SESSION="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            log_error "‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥: $1"
            usage
            exit 1
            ;;
    esac
done

# „É°„Ç§„É≥ÂÆüË°å
main() {
    log_info "üöÄ Crypto AI Platform DevOpsÁõ£Ë¶ñ„Ç®„Éº„Ç∏„Çß„É≥„ÉàÈñãÂßã"
    log_info "Ë®≠ÂÆö: „Çª„ÉÉ„Ç∑„Éß„É≥=$CLAUDE_SESSION, ÈñìÈöî=${CHECK_INTERVAL}Áßí"
    
    check_tmux_session
    setup_claude_commands
    start_log_monitoring
    
    log_success "Áõ£Ë¶ñ„Ç®„Éº„Ç∏„Çß„É≥„ÉàÊ∫ñÂÇôÂÆå‰∫Ü"
    main_monitoring_loop
}

# „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi