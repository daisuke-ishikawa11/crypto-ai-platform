{
  "permissions": {
    "allow": [
      "Bash(npm run type-check:*)",
      "Bash(npm run build:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(node:*)",
      "Bash(curl:*)",
      "Bash(npm install:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(npx tsc:*)",
      "Bash(node:*)",
      "Bash(rm:*)",
      "Bash(npm run dev:*)",
      "Bash(npx playwright test:*)",
      "Bash(pkill:*)",
      "Bash(taskkill:*)",
      "Bash(npm run start:*)",
      "Bash(NEXT_LINT=false npm run build)",
      "Bash(chmod:*)",
      "Bash(npm run lint)",
      "Bash(npm run dev:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(ss:*)",
      "Bash(rm:*)",
      "Bash(npx eslint:*)",
      "Bash(mv:*)",
      "Bash(npx next:*)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(chmod:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(vercel:*)",
      "Bash(npx netlify:*)",
      "Bash(tar:*)",
      "Bash(git checkout:*)",
      "Bash(npx vercel:*)",
      "WebFetch(domain:crypto-ai-platform-dk51ud9bj-zeroone-98677824.vercel.app)",
      "WebFetch(domain:crypto-ai-platform-zeroone-98677824.vercel.app)",
      "Bash(env)",
      "Bash(npx playwright:*)",
      "Bash(npx storybook:*)",
      "Bash(npx shadcn-ui:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(npm run clean:*)",
      "Bash(npm cache clean:*)",
      "Bash(mkdir:*)",
      "Bash(ln:*)",
      "Bash(NPM_CONFIG_PREFIX=~/npm-modules npm install)",
      "Bash(npm run test:e2e:*)",
      "Bash(fuser:*)",
      "Bash(cmd.exe /c \"gh repo view daisuke-ishikawa11/crypto-ai-platform --json visibility,isPrivate\")",
      "Bash(cmd.exe /c \"gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"\"🚀 プロジェクト初期セットアップ\"\" --body \"\"## 概要\\nCrypto AI Platformの初期セットアップと基盤構築\\n\\n## タスク\\n- [x] GitHubリポジトリ作成\\n- [ ] README.md更新\\n- [ ] 環境変数の設定ガイド作成\\n- [ ] CI/CDパイプライン設定\\n- [ ] デプロイメント設定\\n\\n## 優先度\\n高\"\"\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Project Initial Setup\" --body \"## Overview\\nInitial setup and foundation for Crypto AI Platform\\n\\n## Tasks\\n- [x] Create GitHub repository\\n- [ ] Update README.md\\n- [ ] Create environment variables setup guide\\n- [ ] Configure CI/CD pipeline\\n- [ ] Setup deployment\\n\\n## Priority\\nHigh\" --label \"setup,priority:high\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Project Initial Setup\" --body \"## Overview\\nInitial setup and foundation for Crypto AI Platform\\n\\n## Tasks\\n- [x] Create GitHub repository\\n- [ ] Update README.md\\n- [ ] Create environment variables setup guide\\n- [ ] Configure CI/CD pipeline\\n- [ ] Setup deployment\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Implement 85 Learning Lessons Content\" --body \"## Overview\\nImplement comprehensive learning content system with 85 lessons\\n\\n## Categories to Implement\\n- [ ] Financial Literacy (2 lessons)\\n- [ ] Cryptocurrency Basics (12 lessons)\\n- [ ] Trading Basics (20 lessons)\\n- [ ] DeFi and NFT (17 lessons)\\n- [ ] Advanced Investment Strategies (34 lessons)\\n\\n## Technical Requirements\\n- [ ] Lesson data structure implementation\\n- [ ] Progress tracking system\\n- [ ] Quiz and assessment system\\n- [ ] Achievement badges\\n- [ ] Learning streaks tracking\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"AI Integration - OpenAI and Anthropic Setup\" --body \"## Overview\\nIntegrate AI services for intelligent investment advice and analysis\\n\\n## AI Services to Integrate\\n- [ ] OpenAI GPT-4 integration\\n- [ ] Anthropic Claude integration\\n- [ ] Google Gemini integration\\n- [ ] Volt Agent implementation\\n\\n## Features\\n- [ ] AI-powered chat assistant\\n- [ ] Market sentiment analysis\\n- [ ] Price prediction models\\n- [ ] Portfolio optimization recommendations\\n- [ ] Risk assessment AI\\n\\n## Technical Tasks\\n- [ ] API key management system\\n- [ ] Rate limiting implementation\\n- [ ] Response caching\\n- [ ] Error handling and fallbacks\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Security Implementation and Hardening\" --body \"## Overview\\nImplement comprehensive security measures for production deployment\\n\\n## Security Tasks\\n- [ ] Environment variables encryption\\n- [ ] API key rotation system\\n- [ ] Rate limiting (DDoS protection)\\n- [ ] CSRF protection\\n- [ ] XSS prevention\\n- [ ] SQL injection prevention\\n- [ ] Input validation schemas\\n\\n## Authentication & Authorization\\n- [ ] JWT token management\\n- [ ] Role-based access control (RBAC)\\n- [ ] Session management\\n- [ ] Password policies\\n- [ ] 2FA implementation\\n\\n## Monitoring\\n- [ ] Security audit logging\\n- [ ] Intrusion detection\\n- [ ] Error tracking (Sentry)\\n- [ ] Performance monitoring\\n\\n## Priority\\nCritical\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Database Schema and Supabase Configuration\" --body \"## Overview\\nSetup and optimize database schema with Supabase\\n\\n## Database Tables\\n- [ ] users table with RLS policies\\n- [ ] user_lesson_progress tracking\\n- [ ] user_quiz_attempts history\\n- [ ] user_achievements badges\\n- [ ] user_learning_streaks\\n- [ ] market_data real-time storage\\n- [ ] risk_profiles management\\n- [ ] portfolio_holdings tracking\\n\\n## Optimization Tasks\\n- [ ] Create proper indexes\\n- [ ] Implement Row Level Security (RLS)\\n- [ ] Setup database migrations\\n- [ ] Connection pooling configuration\\n- [ ] Query optimization\\n- [ ] N+1 query prevention\\n\\n## Real-time Features\\n- [ ] Real-time market data subscriptions\\n- [ ] Live portfolio updates\\n- [ ] Alert notifications\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Testing Infrastructure and Quality Assurance\" --body \"## Overview\\nImplement comprehensive testing strategy\\n\\n## Testing Types\\n- [ ] Unit tests with Jest\\n- [ ] Integration tests\\n- [ ] E2E tests with Playwright\\n- [ ] Performance testing\\n- [ ] Security testing\\n- [ ] Load testing\\n\\n## Test Coverage Goals\\n- [ ] Code coverage > 80%\\n- [ ] Critical functions > 95%\\n- [ ] All API endpoints tested\\n- [ ] All UI components tested\\n- [ ] All user flows E2E tested\\n\\n## CI/CD Integration\\n- [ ] Automated test runs on PR\\n- [ ] Test result reporting\\n- [ ] Coverage reports\\n- [ ] Performance benchmarks\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create --repo daisuke-ishikawa11/crypto-ai-platform --title \"Market Data Integration and Real-time Updates\" --body \"## Overview\\nIntegrate multiple market data sources for real-time cryptocurrency information\\n\\n## Data Sources\\n- [ ] Binance API integration\\n- [ ] CoinGecko API\\n- [ ] CoinMarketCap API\\n- [ ] WebSocket connections for real-time data\\n\\n## Features\\n- [ ] Real-time price updates\\n- [ ] Market cap tracking\\n- [ ] Volume analysis\\n- [ ] Price charts (1h, 24h, 7d, 30d)\\n- [ ] Top movers identification\\n- [ ] Market sentiment indicators\\n\\n## Technical Requirements\\n- [ ] Data caching strategy\\n- [ ] Rate limit management\\n- [ ] Fallback data sources\\n- [ ] Data normalization\\n\\n## Priority\\nHigh\")",
      "Bash(cmd.exe /c gh issue create:*)",
      "Bash(cmd.exe /c gh issue list --repo daisuke-ishikawa11/crypto-ai-platform)",
      "Bash(npm test)",
      "mcp__serena__replace_regex",
      "mcp__serena__list_dir",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_file",
      "mcp__serena__find_symbol",
      "mcp__serena__write_memory",
      "WebFetch(domain:github.com)",
      "Bash(git clone:*)",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__read_memory",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "Bash(touch:*)",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "Bash(docker-compose:*)",
      "Bash(npm ls:*)",
      "Bash(sed:*)",
      "Bash(for:*)",
      "Bash(do echo \"Fixing $file\")",
      "Bash(done)",
      "Bash(git restore:*)",
      "Bash(cp:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(cp:*)",
      "Bash(do sed -i 's/const supabase = createClient()/const supabase = await createClient()/g' \"$file\")",
      "Bash(do sed -i 's/const supabase = await createClient();/const supabase = createClient();/g' \"$file\")",
      "Bash(npm config:*)",
      "Bash(npx jest:*)",
      "Bash(do)",
      "Bash(if [[ \"$file\" != *\"lesson-1.ts\")",
      "Bash(\"$file\" != *\"lesson-2.ts\" ]])",
      "Bash(then)",
      "Bash(echo \"Processing $file\")",
      "Bash(fi)",
      "Bash(do sed -i 's/```/\\\\`\\\\`\\\\`/g' /mnt/d/crypto-ai-platform/src/data/lessons/blockchain-tech/lesson-$i.ts)",
      "Bash(uvx:*)",
      "Bash(tsc:*)",
      "Bash(tree:*)",
      "Bash(/mnt/d/crypto-ai-platform/.serena/workflow-scripts.sh help:*)",
      "Bash(.serena/workflow-scripts.sh:*)",
      "Bash(timeout 60s npx tsc --noEmit --skipLibCheck)",
      "Bash(time npm run bun:type-check)",
      "WebFetch(domain:x.com)",
      "Bash(timeout 30s npm run lint:*)",
      "Bash(timeout:*)",
      "Bash(npm run test:*)",
      "Bash(npm audit:*)",
      "Bash(npm outdated)",
      "Bash(npm test:*)",
      "Bash(./node_modules/.bin/tsc:*)",
      "Bash(cat:*)",
      "mcp__supabase__list_organizations",
      "mcp__context7__resolve-library-id",
      "Bash(export:*)",
      "Bash(source:*)",
      "Bash(echo:*)",
      "mcp__supabase__list_projects",
      "Bash(./scripts/setup-persistent-mcp.sh:*)",
      "WebSearch",
      "WebFetch(domain:www.jmooc.jp)",
      "WebFetch(domain:www.coursera.org)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}