import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,

  // サンプリング率の設定
  tracesSampleRate: process.env.NODE_ENV === "production" ? 0.1 : 1.0,

  // デバッグモード
  debug: process.env.NODE_ENV === "development",

  // 環境設定
  environment: process.env.NODE_ENV,
  
  // リリース情報
  release: process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA,
});

// エクスポート関数
export const captureException = Sentry.captureException;
export const captureMessage = Sentry.captureMessage;
export const setUser = Sentry.setUser;
export const setTag = Sentry.setTag;
export const setExtra = Sentry.setExtra;

// サーバー専用エラー追跡
export const trackServerError = (error: Error, context?: Record<string, unknown>) => {
  Sentry.withScope((scope) => {
    scope.setTag("errorType", "server");
    if (context) {
      Object.entries(context).forEach(([key, value]) => {
        scope.setExtra(key, value);
      });
    }
    Sentry.captureException(error);
  });
};

// API エラー追跡
export const trackApiError = (error: Error, endpoint: string, method: string) => {
  Sentry.withScope((scope) => {
    scope.setTag("api.endpoint", endpoint);
    scope.setTag("api.method", method);
    scope.setTag("errorType", "api");
    Sentry.captureException(error);
  });
};

// データベースエラー追跡
export const trackDatabaseError = (error: Error, query?: string, table?: string) => {
  Sentry.withScope((scope) => {
    scope.setTag("errorType", "database");
    if (table) scope.setTag("db.table", table);
    if (query) scope.setExtra("db.query", "[REDACTED]"); // セキュリティのためクエリは記録しない
    Sentry.captureException(error);
  });
};

// パフォーマンス追跡
export const startTransaction = (name: string, operation: string) => {
  return Sentry.startSpan({ name, op: operation }, () => {});
};

// ユーザー識別（サーバーサイド）
export const identifyUser = (user: { id: string; email?: string; role?: string }) => {
  Sentry.setUser({
    id: user.id,
    email: user.email,
    role: user.role,
  });
};

// カスタムメトリクス
export const setMetric = (name: string, value: number, tags?: Record<string, string>) => {
  Sentry.setMeasurement(name, value, 'none');
  if (tags) {
    Object.entries(tags).forEach(([key, value]) => {
      Sentry.setTag(key, value);
    });
  }
};

// 現在のスコープ取得
export const getCurrentScope = () => {
  return Sentry.getCurrentScope();
};

// カスタムブレッドクラム
export const addBreadcrumb = (message: string, category?: string, level?: 'info' | 'warning' | 'error') => {
  Sentry.addBreadcrumb({
    message,
    category: category || 'server',
    level: level || 'info',
    timestamp: Date.now() / 1000,
  });
}; 