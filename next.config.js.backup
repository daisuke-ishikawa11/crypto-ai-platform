// 🔧 Next.js設定 - Cloudflare Workers最適化
// OpenNext + Edge Runtime対応

/** @type {import('next').NextConfig} */
const nextConfig = {
  // 出力設定
  output: 'standalone',
  
  // Edge Runtime設定
  experimental: {
    forceSwcTransforms: true
  },
  
  // 画像最適化（Cloudflare Images使用）
  images: {
    loader: 'custom',
    loaderFile: './src/lib/cloudflare/image-loader.ts',
    domains: [
      'imagedelivery.net', // Cloudflare Images
      'supabase.co',
      'avatars.githubusercontent.com'
    ],
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384]
  },
  
  // 国際化設定（App Routerでは非対応のためコメントアウト）
  // i18n: {
  //   locales: ['ja', 'en'],
  //   defaultLocale: 'ja',
  //   domains: [
  //     {
  //       domain: 'crypto-ai-platform.com',
  //       defaultLocale: 'ja'
  //     },
  //     {
  //       domain: 'en.crypto-ai-platform.com',
  //       defaultLocale: 'en'
  //     }
  //   ]
  // },
  
  // セキュリティヘッダー
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin'
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()'
          }
        ]
      },
      {
        source: '/api/(.*)',
        headers: [
          {
            key: 'Access-Control-Allow-Origin',
            value: process.env.NODE_ENV === 'production' 
              ? 'https://crypto-ai-platform.workers.dev'
              : 'http://localhost:3000'
          },
          {
            key: 'Access-Control-Allow-Methods',
            value: 'GET, POST, PUT, DELETE, OPTIONS'
          },
          {
            key: 'Access-Control-Allow-Headers',
            value: 'Content-Type, Authorization, X-Requested-With'
          }
        ]
      }
    ];
  },
  
  // リダイレクト設定
  async redirects() {
    return [
      {
        source: '/dashboard',
        destination: '/dashboard/overview',
        permanent: false
      },
      {
        source: '/learning',
        destination: '/learning/categories',
        permanent: false
      },
      {
        source: '/market',
        destination: '/market/overview',
        permanent: false
      }
    ];
  },
  
  // リライト設定
  async rewrites() {
    return [
      // API プロキシ
      {
        source: '/api/proxy/coinmarketcap/:path*',
        destination: 'https://pro-api.coinmarketcap.com/:path*'
      },
      // 健康チェック
      {
        source: '/health',
        destination: '/api/health'
      }
    ];
  },
  
  // Webpack設定
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Cloudflare Workers向け最適化
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: require.resolve('crypto-browserify'),
        stream: require.resolve('stream-browserify'),
        util: require.resolve('util'),
        buffer: require.resolve('buffer'),
        process: require.resolve('process/browser')
      };
    }
    
    // プラグイン追加
    config.plugins.push(
      new webpack.ProvidePlugin({
        Buffer: ['buffer', 'Buffer'],
        process: 'process'
      })
    );
    
    // バンドル分析（開発時のみ）
    if (dev && process.env.ANALYZE === 'true') {
      const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
      config.plugins.push(
        new BundleAnalyzerPlugin({
          analyzerMode: 'server',
          openAnalyzer: true
        })
      );
    }
    
    // Tree shaking最適化
    if (!dev) {
      config.optimization = {
        ...config.optimization,
        usedExports: true,
        sideEffects: false
      };
    }
    
    return config;
  },
  
  // 環境変数
  env: {
    CUSTOM_KEY: 'crypto-ai-platform',
    BUILD_TIME: new Date().toISOString(),
    COMMIT_SHA: process.env.GITHUB_SHA || 'development'
  },
  
  // 公開環境変数
  publicRuntimeConfig: {
    staticFolder: '/static'
  },
  
  // サーバーサイド環境変数
  serverRuntimeConfig: {
    PROJECT_ROOT: __dirname
  },
  
  // 型チェック設定
  typescript: {
    // 本番ビルド時は型チェックをスキップ（CI/CDで実行済み）
    ignoreBuildErrors: process.env.NODE_ENV === 'production'
  },
  
  // ESLint設定
  eslint: {
    // 本番ビルド時はESLintをスキップ（CI/CDで実行済み）
    ignoreDuringBuilds: process.env.NODE_ENV === 'production'
  },
  
  // SWC設定
  // swcMinify: true, // Next.js 15では非推奨
  
  // 圧縮設定
  compress: true,
  
  // PoweredBy ヘッダー無効化
  poweredByHeader: false,
  
  // 厳格モード
  reactStrictMode: true,
  
  // トレイル・スラッシュ
  trailingSlash: false,
  
  // ランタイム設定（非推奨のため削除）
  // runtime: 'experimental-edge',
  
  // ログレベル
  logging: {
    fetches: {
      fullUrl: process.env.NODE_ENV === 'development'
    }
  },
  
  // 最適化設定
  compiler: {
    // Emotion CSS-in-JS最適化
    emotion: true,
    
    // styled-components最適化
    styledComponents: true,
    
    // React最適化
    reactRemoveProperties: process.env.NODE_ENV === 'production',
    
    // console.log削除（本番のみ）
    removeConsole: process.env.NODE_ENV === 'production' ? {
      exclude: ['error', 'warn']
    } : false
  },
  
  // モジュール境界設定
  modularizeImports: {
    lodash: {
      transform: 'lodash/{{member}}'
    }
  },
  
  // 外部パッケージ最適化
  transpilePackages: [
    '@supabase/auth-helpers-nextjs',
    '@supabase/auth-helpers-shared'
  ]
};

// 追加設定（環境別）
if (process.env.NODE_ENV === 'development') {
  // 開発環境固有設定
  nextConfig.experimental = {
    ...nextConfig.experimental,
    forceSwcTransforms: true
  };
}

if (process.env.NODE_ENV === 'production') {
  // 本番環境固有設定
  nextConfig.experimental = {
    ...nextConfig.experimental,
    optimizeCss: true,
    optimizePackageImports: [
      'lucide-react',
      '@radix-ui/react-icons'
    ]
  };
}

// Cloudflare Workers向け追加設定
if (process.env.DEPLOY_TARGET === 'cloudflare') {
  nextConfig.experimental = {
    ...nextConfig.experimental,
    esmExternals: true,
    serverMinification: true
  };
  
  // Edge Runtime強制
  nextConfig.experimental.runtime = 'edge';
}

module.exports = nextConfig;